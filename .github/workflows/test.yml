name: workflow
on:
  push:
    branches:
      separate-docker
jobs:
#  space-debug:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Space debug
#        run: |
#          sudo rm -rf /usr/share/dotnet
#          sudo rm -rf /opt/ghc
#          sudo rm -rf "/usr/local/share/boost"
#          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
  client-build:
#    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Setup AWS
        run: scripts/setup_aws.sh $AWS_ACCESS_KEY $AWS_SECRET $AWS_REGION $CLUSTER_NAME
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: theoverlay-production
      - name: Build Client Docker Image
        run: bash packages/client/scripts/build_docker.sh dev $DOCKER_LABEL
        env:
          DOCKER_LABEL: ${{ secrets.DOCKER_LABEL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ECR_URL: ${{ secrets.ECR_URL }}
      - name: Create artifact
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_client'
  gameserver-build:
#    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Setup AWS
        run: scripts/setup_aws.sh $AWS_ACCESS_KEY $AWS_SECRET $AWS_REGION $CLUSTER_NAME
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: theoverlay-production
      - name: Build Client Docker Image
        run: bash packages/gameserver/scripts/build_docker.sh dev $DOCKER_LABEL
        env:
          DOCKER_LABEL: ${{ secrets.DOCKER_LABEL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ECR_URL: ${{ secrets.ECR_URL }}
      - name: Create artifact
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_gameserver'

  api-server-build:
#    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.x
      - name: Setup AWS
        run: scripts/setup_aws.sh $AWS_ACCESS_KEY $AWS_SECRET $AWS_REGION $CLUSTER_NAME
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: theoverlay-production
      - name: Build Client Docker Image
        run: bash packages/server/scripts/build_docker.sh dev $DOCKER_LABEL
        env:
          DOCKER_LABEL: ${{ secrets.DOCKER_LABEL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ECR_URL: ${{ secrets.ECR_URL }}
      - name: Create artifact
        uses: ishworkh/docker-image-artifact-upload@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_server'
  publish-and-deploy:
    needs: [client-build, gameserver-build, api-server-build]
    runs-on: ubuntu-latest
    steps:
      - name: Setup Helm
        run: scripts/setup_helm.sh
      - name: Setup AWS
        run: scripts/setup_aws.sh $AWS_ACCESS_KEY $AWS_SECRET $AWS_REGION $CLUSTER_NAME
        env:
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET: ${{ secrets.AWS_SECRET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          CLUSTER_NAME: theoverlay-production
      - name: npm-install 'cli' and 'aws-sdk'
        run: npm install cli aws-sdk
      - name: Download client artifact
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_client'
      - name: Download gameserver artifact
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_gameserver'
      - name: Download api-server artifact
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: '${{ secrets.DOCKER_LABEL}}_server'
      - name: Publish to Elastic Container Registry
        run: bash scripts/publish_ecr.sh dev $GITHUB_SHA $DOCKER_LABEL
        env:
          DOCKER_LABEL: ${{ secrets.DOCKER_LABEL }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          ECR_URL: ${{ secrets.ECR_URL }}
#      - name: Deploy to EKS
#        run: bash scripts/deploy.sh dev $GITHUB_SHA
#      - name: Publish to DockerHub
#        run: bash scripts/publish_dockerhub.sh $GITHUB_SHA $DOCKER_LABEL
#        env:
#          DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
#          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
#          DOCKER_LABEL: ${{ secrets.DOCKER_LABEL }}
      - name: Job succeeded
        if: always()
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6 # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
        env:
          JOB_STATUS: ${{ job.status }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
          run: |
            git clone https://github.com/DiscordHooks/github-actions-discord-webhook.git webhook
            bash webhook/send.sh $JOB_STATUS $WEBHOOK_URL
          shell: bash